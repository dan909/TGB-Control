'CR1000 Series
'Created by Danny Awty-Carroll (dga1@aber.ac.uk)

Public PID As Boolean = false ' this is false if bang bang control is used and true if a proportional integral derivative control shoud be used



'Declare Public Variables
Public PTemp, batt_volt
Public PTemp_C
Public Counter
Public OutString As String * 1000
Public InString As String * 1000
Public GMT(9)	'real time clock
Public SetLR(2) As Float
Public EndLR(2) As Float

Public MeanTempLR(2)  As Float
Public TempDifLR(2)  As Float

Public A1 As Float
Public A7 As Float
Public A14 As Float
Public G1 As Float
Public G7 As Float
Public G14 As Float
Public Q1 As Float
Public Q7 As Float
Public Q14 As Float

Alias GMT(4) = Hour
Alias GMT(5) = Minute
Alias GMT(6) = Second
Alias GMT(9) = UK_DOY

Public HeatLeft As Boolean
Public HeatRight As Boolean

Units EndLR(1)=Deg C
Units EndLR(2)=Deg C

Units A1=Deg C
Units A7=Deg C
Units A14=Deg C
Units G1=Deg C
Units G7=Deg C
Units G14=Deg C
Units Q1=Deg C
Units Q7=Deg C
Units Q14=Deg C

Units PTemp_C=Deg C


Const ON = 1
Const OFF = 0


'Define Data Tables
DataTable (Test,1,-1)
    DataInterval (0,15,Sec,10)
    Minimum (1,batt_volt,FP2,0,False)
    Sample (1,PTemp,FP2)
    Sample (1,OutString,String)
    Average(1,EndLR(1),FP2,False)
	  Average(1,EndLR(2),FP2,False)
    Average(1,A1,FP2,False)
	  Average(1,A7,FP2,False)
	  Average(1,A14,FP2,False)
    Average(1,G1,FP2,False)
	  Average(1,G7,FP2,False)
	  Average(1,G14,FP2,False)
	  Average(1,Q1,FP2,False)
	  Average(1,Q7,FP2,False)
	  Average(1,Q14,FP2,False)
EndTable

 

'Main Program
BeginProg

    'Set up communication ports to send and receive data
    'jumper wire from C1 (COM1 TX) and C2 (COM1 RX) to Arduino
    SerialOpen (Com1,9600,16,5,10000)
    SerialFlush(Com1)
    

    Scan (5,Sec,0,0)
      RealTime(GMT())
      PanelTemp (PTemp,250)
      Battery (batt_volt)

      Counter = Counter + 1
      OutString = ((Hour*4) + Floor(Minute/15)) + "/"

      'Send String over communication port C1 (COM1 TX).
      SerialOut(Com1,OutString,"",0,100)
      'Receive String over communication port C2 (COM1 RX).
      SerialIn(InString,Com1,150,0,16)
      SerialFlush(Com1)

      If Len(InString) > 5 Then
        SplitStr(SetLR(1),InString,"RL=",2,0)
      EndIf
      
      PanelTemp(PTemp_C,_60Hz)
      TCDiff(EndLR(),2,mV2_5,1,TypeT,PTemp_C,True ,0,250,1.0,0)
      TCSe(A1,1,mV2_5,5,TypeT,PTemp_C,False,0,250,1.0,0)
      TCSe(A7,1,mV2_5,6,TypeT,PTemp_C,False,0,250,1.0,0)
      TCSe(A14,1,mV2_5,7,TypeT,PTemp_C,False,0,250,1.0,0)
      TCSe(G1,1,mV2_5,8,TypeT,PTemp_C,False,0,250,1.0,0)
      TCSe(G7,1,mV2_5,9,TypeT,PTemp_C,False,0,250,1.0,0)
      TCSe(G14,1,mV2_5,10,TypeT,PTemp_C,False,0,250,1.0,0)
      TCSe(Q1,1,mV2_5,11,TypeT,PTemp_C,False,0,250,1.0,0)
      TCSe(Q7,1,mV2_5,12,TypeT,PTemp_C,False,0,250,1.0,0)
      TCSe(Q14,1,mV2_5,13,TypeT,PTemp_C,False,0,250,1.0,0)
      
      
      
      If(PID) Then
        MeanTempLR(1) = (A1 + A7 + A14)/3
        MeanTempLR(2) = (Q1 + Q7 + Q14)/3
        
        If(EndLR(1) < MeanTempLR(1)) Then
          HeatLeft = ON
        Else
          HeatLeft = OFF
        EndIf
        
        If(EndLR(2) < MeanTempLR(2)) Then
          HeatRight = ON
        Else
          HeatRight = OFF
        EndIf

        
      Else
        If(EndLR(1) < SetLR(1)) Then
          HeatLeft = ON
        Else
          HeatLeft = OFF
        EndIf
        
        If(EndLR(2) < SetLR(2)) Then
          HeatRight = ON
        Else
          HeatRight = OFF
        EndIf
      
      EndIf
      
      
      PortSet(5, HeatLeft)
      PortSet(6, HeatRight)
      

      'Call Output Tables
      CallTable Test
    NextScan
    
EndProg

